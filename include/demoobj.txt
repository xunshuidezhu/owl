
demo:     file format elf64-x86-64


Disassembly of section .init:

00000000004006f0 <_init>:
  4006f0:	48 83 ec 08          	sub    $0x8,%rsp
  4006f4:	48 8b 05 fd 28 20 00 	mov    0x2028fd(%rip),%rax        # 602ff8 <_DYNAMIC+0x200>
  4006fb:	48 85 c0             	test   %rax,%rax
  4006fe:	74 05                	je     400705 <_init+0x15>
  400700:	e8 9b 00 00 00       	callq  4007a0 <_Unwind_Resume@plt+0x10>
  400705:	48 83 c4 08          	add    $0x8,%rsp
  400709:	c3                   	retq   

Disassembly of section .plt:

0000000000400710 <printf@plt-0x10>:
  400710:	ff 35 f2 28 20 00    	pushq  0x2028f2(%rip)        # 603008 <_GLOBAL_OFFSET_TABLE_+0x8>
  400716:	ff 25 f4 28 20 00    	jmpq   *0x2028f4(%rip)        # 603010 <_GLOBAL_OFFSET_TABLE_+0x10>
  40071c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000400720 <printf@plt>:
  400720:	ff 25 f2 28 20 00    	jmpq   *0x2028f2(%rip)        # 603018 <_GLOBAL_OFFSET_TABLE_+0x18>
  400726:	68 00 00 00 00       	pushq  $0x0
  40072b:	e9 e0 ff ff ff       	jmpq   400710 <_init+0x20>

0000000000400730 <read@plt>:
  400730:	ff 25 ea 28 20 00    	jmpq   *0x2028ea(%rip)        # 603020 <_GLOBAL_OFFSET_TABLE_+0x20>
  400736:	68 01 00 00 00       	pushq  $0x1
  40073b:	e9 d0 ff ff ff       	jmpq   400710 <_init+0x20>

0000000000400740 <__libc_start_main@plt>:
  400740:	ff 25 e2 28 20 00    	jmpq   *0x2028e2(%rip)        # 603028 <_GLOBAL_OFFSET_TABLE_+0x28>
  400746:	68 02 00 00 00       	pushq  $0x2
  40074b:	e9 c0 ff ff ff       	jmpq   400710 <_init+0x20>

0000000000400750 <sleep@plt>:
  400750:	ff 25 da 28 20 00    	jmpq   *0x2028da(%rip)        # 603030 <_GLOBAL_OFFSET_TABLE_+0x30>
  400756:	68 03 00 00 00       	pushq  $0x3
  40075b:	e9 b0 ff ff ff       	jmpq   400710 <_init+0x20>

0000000000400760 <__stack_chk_fail@plt>:
  400760:	ff 25 d2 28 20 00    	jmpq   *0x2028d2(%rip)        # 603038 <_GLOBAL_OFFSET_TABLE_+0x38>
  400766:	68 04 00 00 00       	pushq  $0x4
  40076b:	e9 a0 ff ff ff       	jmpq   400710 <_init+0x20>

0000000000400770 <__gxx_personality_v0@plt>:
  400770:	ff 25 ca 28 20 00    	jmpq   *0x2028ca(%rip)        # 603040 <_GLOBAL_OFFSET_TABLE_+0x40>
  400776:	68 05 00 00 00       	pushq  $0x5
  40077b:	e9 90 ff ff ff       	jmpq   400710 <_init+0x20>

0000000000400780 <write@plt>:
  400780:	ff 25 c2 28 20 00    	jmpq   *0x2028c2(%rip)        # 603048 <_GLOBAL_OFFSET_TABLE_+0x48>
  400786:	68 06 00 00 00       	pushq  $0x6
  40078b:	e9 80 ff ff ff       	jmpq   400710 <_init+0x20>

0000000000400790 <_Unwind_Resume@plt>:
  400790:	ff 25 ba 28 20 00    	jmpq   *0x2028ba(%rip)        # 603050 <_GLOBAL_OFFSET_TABLE_+0x50>
  400796:	68 07 00 00 00       	pushq  $0x7
  40079b:	e9 70 ff ff ff       	jmpq   400710 <_init+0x20>

Disassembly of section .plt.got:

00000000004007a0 <.plt.got>:
  4007a0:	ff 25 52 28 20 00    	jmpq   *0x202852(%rip)        # 602ff8 <_DYNAMIC+0x200>
  4007a6:	66 90                	xchg   %ax,%ax

Disassembly of section .text:

00000000004007b0 <_start>:
  4007b0:	31 ed                	xor    %ebp,%ebp
  4007b2:	49 89 d1             	mov    %rdx,%r9
  4007b5:	5e                   	pop    %rsi
  4007b6:	48 89 e2             	mov    %rsp,%rdx
  4007b9:	48 83 e4 f0          	and    $0xfffffffffffffff0,%rsp
  4007bd:	50                   	push   %rax
  4007be:	54                   	push   %rsp
  4007bf:	49 c7 c0 a0 14 40 00 	mov    $0x4014a0,%r8
  4007c6:	48 c7 c1 30 14 40 00 	mov    $0x401430,%rcx
  4007cd:	48 c7 c7 7b 09 40 00 	mov    $0x40097b,%rdi
  4007d4:	e8 67 ff ff ff       	callq  400740 <__libc_start_main@plt>
  4007d9:	f4                   	hlt    
  4007da:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

00000000004007e0 <deregister_tm_clones>:
  4007e0:	b8 6f 30 60 00       	mov    $0x60306f,%eax
  4007e5:	55                   	push   %rbp
  4007e6:	48 2d 68 30 60 00    	sub    $0x603068,%rax
  4007ec:	48 83 f8 0e          	cmp    $0xe,%rax
  4007f0:	48 89 e5             	mov    %rsp,%rbp
  4007f3:	76 1b                	jbe    400810 <deregister_tm_clones+0x30>
  4007f5:	b8 00 00 00 00       	mov    $0x0,%eax
  4007fa:	48 85 c0             	test   %rax,%rax
  4007fd:	74 11                	je     400810 <deregister_tm_clones+0x30>
  4007ff:	5d                   	pop    %rbp
  400800:	bf 68 30 60 00       	mov    $0x603068,%edi
  400805:	ff e0                	jmpq   *%rax
  400807:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  40080e:	00 00 
  400810:	5d                   	pop    %rbp
  400811:	c3                   	retq   
  400812:	0f 1f 40 00          	nopl   0x0(%rax)
  400816:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  40081d:	00 00 00 

0000000000400820 <register_tm_clones>:
  400820:	be 68 30 60 00       	mov    $0x603068,%esi
  400825:	55                   	push   %rbp
  400826:	48 81 ee 68 30 60 00 	sub    $0x603068,%rsi
  40082d:	48 c1 fe 03          	sar    $0x3,%rsi
  400831:	48 89 e5             	mov    %rsp,%rbp
  400834:	48 89 f0             	mov    %rsi,%rax
  400837:	48 c1 e8 3f          	shr    $0x3f,%rax
  40083b:	48 01 c6             	add    %rax,%rsi
  40083e:	48 d1 fe             	sar    %rsi
  400841:	74 15                	je     400858 <register_tm_clones+0x38>
  400843:	b8 00 00 00 00       	mov    $0x0,%eax
  400848:	48 85 c0             	test   %rax,%rax
  40084b:	74 0b                	je     400858 <register_tm_clones+0x38>
  40084d:	5d                   	pop    %rbp
  40084e:	bf 68 30 60 00       	mov    $0x603068,%edi
  400853:	ff e0                	jmpq   *%rax
  400855:	0f 1f 00             	nopl   (%rax)
  400858:	5d                   	pop    %rbp
  400859:	c3                   	retq   
  40085a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000400860 <__do_global_dtors_aux>:
  400860:	80 3d 59 28 20 00 00 	cmpb   $0x0,0x202859(%rip)        # 6030c0 <completed.7594>
  400867:	75 11                	jne    40087a <__do_global_dtors_aux+0x1a>
  400869:	55                   	push   %rbp
  40086a:	48 89 e5             	mov    %rsp,%rbp
  40086d:	e8 6e ff ff ff       	callq  4007e0 <deregister_tm_clones>
  400872:	5d                   	pop    %rbp
  400873:	c6 05 46 28 20 00 01 	movb   $0x1,0x202846(%rip)        # 6030c0 <completed.7594>
  40087a:	f3 c3                	repz retq 
  40087c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000400880 <frame_dummy>:
  400880:	bf f0 2d 60 00       	mov    $0x602df0,%edi
  400885:	48 83 3f 00          	cmpq   $0x0,(%rdi)
  400889:	75 05                	jne    400890 <frame_dummy+0x10>
  40088b:	eb 93                	jmp    400820 <register_tm_clones>
  40088d:	0f 1f 00             	nopl   (%rax)
  400890:	b8 00 00 00 00       	mov    $0x0,%eax
  400895:	48 85 c0             	test   %rax,%rax
  400898:	74 f1                	je     40088b <frame_dummy+0xb>
  40089a:	55                   	push   %rbp
  40089b:	48 89 e5             	mov    %rsp,%rbp
  40089e:	ff d0                	callq  *%rax
  4008a0:	5d                   	pop    %rbp
  4008a1:	e9 7a ff ff ff       	jmpq   400820 <register_tm_clones>

00000000004008a6 <_Z7readMsgPv>:
#include <stdio.h>
#include <string.h>
int fd;

void* readMsg(void* arg)
{
  4008a6:	55                   	push   %rbp
  4008a7:	48 89 e5             	mov    %rsp,%rbp
  4008aa:	48 83 ec 20          	sub    $0x20,%rsp
  4008ae:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  4008b2:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  4008b9:	00 00 
  4008bb:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  4008bf:	31 c0                	xor    %eax,%eax
    unsigned long long buffer;
    sleep(2);
  4008c1:	bf 02 00 00 00       	mov    $0x2,%edi
  4008c6:	e8 85 fe ff ff       	callq  400750 <sleep@plt>
    read(fd, &buffer, 8);
  4008cb:	8b 05 f3 27 20 00    	mov    0x2027f3(%rip),%eax        # 6030c4 <fd>
  4008d1:	48 8d 4d f0          	lea    -0x10(%rbp),%rcx
  4008d5:	ba 08 00 00 00       	mov    $0x8,%edx
  4008da:	48 89 ce             	mov    %rcx,%rsi
  4008dd:	89 c7                	mov    %eax,%edi
  4008df:	e8 4c fe ff ff       	callq  400730 <read@plt>
    printf("%d", buffer);
  4008e4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4008e8:	48 89 c6             	mov    %rax,%rsi
  4008eb:	bf bb 14 40 00       	mov    $0x4014bb,%edi
  4008f0:	b8 00 00 00 00       	mov    $0x0,%eax
  4008f5:	e8 26 fe ff ff       	callq  400720 <printf@plt>
}
  4008fa:	90                   	nop
  4008fb:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  4008ff:	64 48 33 14 25 28 00 	xor    %fs:0x28,%rdx
  400906:	00 00 
  400908:	74 05                	je     40090f <_Z7readMsgPv+0x69>
  40090a:	e8 51 fe ff ff       	callq  400760 <__stack_chk_fail@plt>
  40090f:	c9                   	leaveq 
  400910:	c3                   	retq   

0000000000400911 <_Z8writeMsgPv>:

void* writeMsg(void* arg)
{
  400911:	55                   	push   %rbp
  400912:	48 89 e5             	mov    %rsp,%rbp
  400915:	48 83 ec 20          	sub    $0x20,%rsp
  400919:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  40091d:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  400924:	00 00 
  400926:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  40092a:	31 c0                	xor    %eax,%eax
    unsigned long long buffer = 31;
  40092c:	48 c7 45 f0 1f 00 00 	movq   $0x1f,-0x10(%rbp)
  400933:	00 
    write(fd, &buffer, 8);
  400934:	8b 05 8a 27 20 00    	mov    0x20278a(%rip),%eax        # 6030c4 <fd>
  40093a:	48 8d 4d f0          	lea    -0x10(%rbp),%rcx
  40093e:	ba 08 00 00 00       	mov    $0x8,%edx
  400943:	48 89 ce             	mov    %rcx,%rsi
  400946:	89 c7                	mov    %eax,%edi
  400948:	e8 33 fe ff ff       	callq  400780 <write@plt>
}
  40094d:	90                   	nop
  40094e:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  400952:	64 48 33 14 25 28 00 	xor    %fs:0x28,%rdx
  400959:	00 00 
  40095b:	74 05                	je     400962 <_Z8writeMsgPv+0x51>
  40095d:	e8 fe fd ff ff       	callq  400760 <__stack_chk_fail@plt>
  400962:	c9                   	leaveq 
  400963:	c3                   	retq   

0000000000400964 <_ZZ4mainENKUlvE_clEv>:
//     pthread_t tid1, tid2;
//     pthread_create(&tid1, nullptr, writeMsg, 0);
//     pthread_create(&tid2, nullptr, readMsg, 0);
//     pthread_detach(tid1);
//     pthread_detach(tid2);
    auto f1 = [](){};
  400964:	55                   	push   %rbp
  400965:	48 89 e5             	mov    %rsp,%rbp
  400968:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40096c:	90                   	nop
  40096d:	5d                   	pop    %rbp
  40096e:	c3                   	retq   
  40096f:	90                   	nop

0000000000400970 <_ZZ4mainENKUlvE0_clEv>:
    auto f2 = [](){};
  400970:	55                   	push   %rbp
  400971:	48 89 e5             	mov    %rsp,%rbp
  400974:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  400978:	90                   	nop
  400979:	5d                   	pop    %rbp
  40097a:	c3                   	retq   

000000000040097b <main>:
    unsigned long long buffer = 31;
    write(fd, &buffer, 8);
}

int main()
{
  40097b:	55                   	push   %rbp
  40097c:	48 89 e5             	mov    %rsp,%rbp
  40097f:	53                   	push   %rbx
  400980:	48 83 ec 48          	sub    $0x48,%rsp
  400984:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  40098b:	00 00 
  40098d:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  400991:	31 c0                	xor    %eax,%eax
//     pthread_create(&tid2, nullptr, readMsg, 0);
//     pthread_detach(tid1);
//     pthread_detach(tid2);
    auto f1 = [](){};
    auto f2 = [](){};
    std::function<void(void)> f;
  400993:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
  400997:	48 89 c7             	mov    %rax,%rdi
  40099a:	e8 47 08 00 00       	callq  4011e6 <_ZNSt8functionIFvvEEC1Ev>
    f = f1;
  40099f:	48 8d 55 be          	lea    -0x42(%rbp),%rdx
  4009a3:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
  4009a7:	48 89 d6             	mov    %rdx,%rsi
  4009aa:	48 89 c7             	mov    %rax,%rdi
  4009ad:	e8 6a 00 00 00       	callq  400a1c <_ZNSt8functionIFvvEEaSIRZ4mainEUlvE_EENSt9enable_ifIXsrNS1_9_CallableINSt5decayIT_E4typeENSt9result_ofIFSA_vEE4typeEEE5valueERS1_E4typeEOS8_>
    f = f2;
  4009b2:	48 8d 55 bf          	lea    -0x41(%rbp),%rdx
  4009b6:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
  4009ba:	48 89 d6             	mov    %rdx,%rsi
  4009bd:	48 89 c7             	mov    %rax,%rdi
  4009c0:	e8 e3 00 00 00       	callq  400aa8 <_ZNSt8functionIFvvEEaSIRZ4mainEUlvE0_EENSt9enable_ifIXsrNS1_9_CallableINSt5decayIT_E4typeENSt9result_ofIFSA_vEE4typeEEE5valueERS1_E4typeEOS8_>
//     pthread_create(&tid2, nullptr, readMsg, 0);
//     pthread_detach(tid1);
//     pthread_detach(tid2);
    auto f1 = [](){};
    auto f2 = [](){};
    std::function<void(void)> f;
  4009c5:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
  4009c9:	48 89 c7             	mov    %rax,%rdi
  4009cc:	e8 ed 07 00 00       	callq  4011be <_ZNSt8functionIFvvEED1Ev>
    f = f1;
    f = f2;

  4009d1:	b8 00 00 00 00       	mov    $0x0,%eax
  4009d6:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  4009da:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
  4009e1:	00 00 
  4009e3:	74 21                	je     400a06 <main+0x8b>
  4009e5:	eb 1a                	jmp    400a01 <main+0x86>
  4009e7:	48 89 c3             	mov    %rax,%rbx
//     pthread_create(&tid2, nullptr, readMsg, 0);
//     pthread_detach(tid1);
//     pthread_detach(tid2);
    auto f1 = [](){};
    auto f2 = [](){};
    std::function<void(void)> f;
  4009ea:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
  4009ee:	48 89 c7             	mov    %rax,%rdi
  4009f1:	e8 c8 07 00 00       	callq  4011be <_ZNSt8functionIFvvEED1Ev>
  4009f6:	48 89 d8             	mov    %rbx,%rax
  4009f9:	48 89 c7             	mov    %rax,%rdi
  4009fc:	e8 8f fd ff ff       	callq  400790 <_Unwind_Resume@plt>
    f = f1;
    f = f2;

  400a01:	e8 5a fd ff ff       	callq  400760 <__stack_chk_fail@plt>
  400a06:	48 83 c4 48          	add    $0x48,%rsp
  400a0a:	5b                   	pop    %rbx
  400a0b:	5d                   	pop    %rbp
  400a0c:	c3                   	retq   

0000000000400a0d <_ZSt7forwardIRZ4mainEUlvE_EOT_RNSt16remove_referenceIS2_E4typeE>:
   *
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
  400a0d:	55                   	push   %rbp
  400a0e:	48 89 e5             	mov    %rsp,%rbp
  400a11:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<_Tp&&>(__t); }
  400a15:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  400a19:	5d                   	pop    %rbp
  400a1a:	c3                   	retq   
  400a1b:	90                   	nop

0000000000400a1c <_ZNSt8functionIFvvEEaSIRZ4mainEUlvE_EENSt9enable_ifIXsrNS1_9_CallableINSt5decayIT_E4typeENSt9result_ofIFSA_vEE4typeEEE5valueERS1_E4typeEOS8_>:
       *  If @a __f is a non-NULL function pointer or an object of type @c
       *  reference_wrapper<F>, this function will not throw.
       */
      template<typename _Functor>
	_Requires<_Callable<typename decay<_Functor>::type>, function&>
	operator=(_Functor&& __f)
  400a1c:	55                   	push   %rbp
  400a1d:	48 89 e5             	mov    %rsp,%rbp
  400a20:	53                   	push   %rbx
  400a21:	48 83 ec 48          	sub    $0x48,%rsp
  400a25:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
  400a29:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
  400a2d:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  400a34:	00 00 
  400a36:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  400a3a:	31 c0                	xor    %eax,%eax
	{
	  function(std::forward<_Functor>(__f)).swap(*this);
  400a3c:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  400a40:	48 89 c7             	mov    %rax,%rdi
  400a43:	e8 c5 ff ff ff       	callq  400a0d <_ZSt7forwardIRZ4mainEUlvE_EOT_RNSt16remove_referenceIS2_E4typeE>
  400a48:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
  400a4c:	48 83 ec 08          	sub    $0x8,%rsp
  400a50:	53                   	push   %rbx
  400a51:	48 89 c7             	mov    %rax,%rdi
  400a54:	e8 db 00 00 00       	callq  400b34 <_ZNSt8functionIFvvEEC1IZ4mainEUlvE_vvEET_>
  400a59:	48 83 c4 10          	add    $0x10,%rsp
  400a5d:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  400a61:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
  400a65:	48 89 d6             	mov    %rdx,%rsi
  400a68:	48 89 c7             	mov    %rax,%rdi
  400a6b:	e8 9e 07 00 00       	callq  40120e <_ZNSt8functionIFvvEE4swapERS1_>
  400a70:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
  400a74:	48 89 c7             	mov    %rax,%rdi
  400a77:	e8 42 07 00 00       	callq  4011be <_ZNSt8functionIFvvEED1Ev>
	  return *this;
  400a7c:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
	}
  400a80:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  400a84:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
  400a8b:	00 00 
  400a8d:	74 05                	je     400a94 <_ZNSt8functionIFvvEEaSIRZ4mainEUlvE_EENSt9enable_ifIXsrNS1_9_CallableINSt5decayIT_E4typeENSt9result_ofIFSA_vEE4typeEEE5valueERS1_E4typeEOS8_+0x78>
  400a8f:	e8 cc fc ff ff       	callq  400760 <__stack_chk_fail@plt>
  400a94:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  400a98:	c9                   	leaveq 
  400a99:	c3                   	retq   

0000000000400a9a <_ZSt7forwardIRZ4mainEUlvE0_EOT_RNSt16remove_referenceIS2_E4typeE>:
   *
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
  400a9a:	55                   	push   %rbp
  400a9b:	48 89 e5             	mov    %rsp,%rbp
  400a9e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<_Tp&&>(__t); }
  400aa2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  400aa6:	5d                   	pop    %rbp
  400aa7:	c3                   	retq   

0000000000400aa8 <_ZNSt8functionIFvvEEaSIRZ4mainEUlvE0_EENSt9enable_ifIXsrNS1_9_CallableINSt5decayIT_E4typeENSt9result_ofIFSA_vEE4typeEEE5valueERS1_E4typeEOS8_>:
       *  If @a __f is a non-NULL function pointer or an object of type @c
       *  reference_wrapper<F>, this function will not throw.
       */
      template<typename _Functor>
	_Requires<_Callable<typename decay<_Functor>::type>, function&>
	operator=(_Functor&& __f)
  400aa8:	55                   	push   %rbp
  400aa9:	48 89 e5             	mov    %rsp,%rbp
  400aac:	53                   	push   %rbx
  400aad:	48 83 ec 48          	sub    $0x48,%rsp
  400ab1:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
  400ab5:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
  400ab9:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  400ac0:	00 00 
  400ac2:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  400ac6:	31 c0                	xor    %eax,%eax
	{
	  function(std::forward<_Functor>(__f)).swap(*this);
  400ac8:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  400acc:	48 89 c7             	mov    %rax,%rdi
  400acf:	e8 c6 ff ff ff       	callq  400a9a <_ZSt7forwardIRZ4mainEUlvE0_EOT_RNSt16remove_referenceIS2_E4typeE>
  400ad4:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
  400ad8:	48 83 ec 08          	sub    $0x8,%rsp
  400adc:	53                   	push   %rbx
  400add:	48 89 c7             	mov    %rax,%rdi
  400ae0:	e8 e7 00 00 00       	callq  400bcc <_ZNSt8functionIFvvEEC1IZ4mainEUlvE0_vvEET_>
  400ae5:	48 83 c4 10          	add    $0x10,%rsp
  400ae9:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  400aed:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
  400af1:	48 89 d6             	mov    %rdx,%rsi
  400af4:	48 89 c7             	mov    %rax,%rdi
  400af7:	e8 12 07 00 00       	callq  40120e <_ZNSt8functionIFvvEE4swapERS1_>
  400afc:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
  400b00:	48 89 c7             	mov    %rax,%rdi
  400b03:	e8 b6 06 00 00       	callq  4011be <_ZNSt8functionIFvvEED1Ev>
	  return *this;
  400b08:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
	}
  400b0c:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  400b10:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
  400b17:	00 00 
  400b19:	74 05                	je     400b20 <_ZNSt8functionIFvvEEaSIRZ4mainEUlvE0_EENSt9enable_ifIXsrNS1_9_CallableINSt5decayIT_E4typeENSt9result_ofIFSA_vEE4typeEEE5valueERS1_E4typeEOS8_+0x78>
  400b1b:	e8 40 fc ff ff       	callq  400760 <__stack_chk_fail@plt>
  400b20:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  400b24:	c9                   	leaveq 
  400b25:	c3                   	retq   

0000000000400b26 <_ZSt4moveIRZ4mainEUlvE_EONSt16remove_referenceIT_E4typeEOS3_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
  400b26:	55                   	push   %rbp
  400b27:	48 89 e5             	mov    %rsp,%rbp
  400b2a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
  400b2e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  400b32:	5d                   	pop    %rbp
  400b33:	c3                   	retq   

0000000000400b34 <_ZNSt8functionIFvvEEC1IZ4mainEUlvE_vvEET_>:
	}
    }

  template<typename _Res, typename... _ArgTypes>
    template<typename _Functor, typename, typename>
      function<_Res(_ArgTypes...)>::
  400b34:	55                   	push   %rbp
  400b35:	48 89 e5             	mov    %rsp,%rbp
  400b38:	53                   	push   %rbx
  400b39:	48 83 ec 18          	sub    $0x18,%rsp
  400b3d:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
      function(_Functor __f)
      : _Function_base()
  400b41:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  400b45:	48 89 c7             	mov    %rax,%rdi
  400b48:	e8 8d 06 00 00       	callq  4011da <_ZNSt31_Maybe_unary_or_binary_functionIvIEEC1Ev>
  400b4d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  400b51:	48 89 c7             	mov    %rax,%rdi
  400b54:	e8 17 06 00 00       	callq  401170 <_ZNSt14_Function_baseC1Ev>
      {
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
  400b59:	48 8d 7d 10          	lea    0x10(%rbp),%rdi
  400b5d:	e8 f3 00 00 00       	callq  400c55 <_ZNSt14_Function_base13_Base_managerIZ4mainEUlvE_E21_M_not_empty_functionIS1_EEbRKT_>
  400b62:	84 c0                	test   %al,%al
  400b64:	74 4f                	je     400bb5 <_ZNSt8functionIFvvEEC1IZ4mainEUlvE_vvEET_+0x81>
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
  400b66:	48 8d 7d 10          	lea    0x10(%rbp),%rdi
  400b6a:	e8 b7 ff ff ff       	callq  400b26 <_ZSt4moveIRZ4mainEUlvE_EONSt16remove_referenceIT_E4typeEOS3_>
  400b6f:	48 89 c2             	mov    %rax,%rdx
  400b72:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  400b76:	48 89 d6             	mov    %rdx,%rsi
  400b79:	48 89 c7             	mov    %rax,%rdi
  400b7c:	e8 e3 00 00 00       	callq  400c64 <_ZNSt14_Function_base13_Base_managerIZ4mainEUlvE_E15_M_init_functorERSt9_Any_dataOS1_>
	    _M_invoker = &_My_handler::_M_invoke;
  400b81:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  400b85:	48 c7 40 18 c6 0c 40 	movq   $0x400cc6,0x18(%rax)
  400b8c:	00 
	    _M_manager = &_My_handler::_M_manager;
  400b8d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  400b91:	48 c7 40 10 e9 0c 40 	movq   $0x400ce9,0x10(%rax)
  400b98:	00 
	  }
      }
  400b99:	eb 1a                	jmp    400bb5 <_ZNSt8functionIFvvEEC1IZ4mainEUlvE_vvEET_+0x81>
  400b9b:	48 89 c3             	mov    %rax,%rbx

  template<typename _Res, typename... _ArgTypes>
    template<typename _Functor, typename, typename>
      function<_Res(_ArgTypes...)>::
      function(_Functor __f)
      : _Function_base()
  400b9e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  400ba2:	48 89 c7             	mov    %rax,%rdi
  400ba5:	e8 de 05 00 00       	callq  401188 <_ZNSt14_Function_baseD1Ev>
  400baa:	48 89 d8             	mov    %rbx,%rax
  400bad:	48 89 c7             	mov    %rax,%rdi
  400bb0:	e8 db fb ff ff       	callq  400790 <_Unwind_Resume@plt>
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
	  }
      }
  400bb5:	90                   	nop
  400bb6:	48 83 c4 18          	add    $0x18,%rsp
  400bba:	5b                   	pop    %rbx
  400bbb:	5d                   	pop    %rbp
  400bbc:	c3                   	retq   

0000000000400bbd <_ZSt4moveIRZ4mainEUlvE0_EONSt16remove_referenceIT_E4typeEOS3_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
  400bbd:	55                   	push   %rbp
  400bbe:	48 89 e5             	mov    %rsp,%rbp
  400bc1:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
  400bc5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  400bc9:	5d                   	pop    %rbp
  400bca:	c3                   	retq   
  400bcb:	90                   	nop

0000000000400bcc <_ZNSt8functionIFvvEEC1IZ4mainEUlvE0_vvEET_>:
	}
    }

  template<typename _Res, typename... _ArgTypes>
    template<typename _Functor, typename, typename>
      function<_Res(_ArgTypes...)>::
  400bcc:	55                   	push   %rbp
  400bcd:	48 89 e5             	mov    %rsp,%rbp
  400bd0:	53                   	push   %rbx
  400bd1:	48 83 ec 18          	sub    $0x18,%rsp
  400bd5:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
      function(_Functor __f)
      : _Function_base()
  400bd9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  400bdd:	48 89 c7             	mov    %rax,%rdi
  400be0:	e8 f5 05 00 00       	callq  4011da <_ZNSt31_Maybe_unary_or_binary_functionIvIEEC1Ev>
  400be5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  400be9:	48 89 c7             	mov    %rax,%rdi
  400bec:	e8 7f 05 00 00       	callq  401170 <_ZNSt14_Function_baseC1Ev>
      {
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
  400bf1:	48 8d 7d 10          	lea    0x10(%rbp),%rdi
  400bf5:	e8 ba 01 00 00       	callq  400db4 <_ZNSt14_Function_base13_Base_managerIZ4mainEUlvE0_E21_M_not_empty_functionIS1_EEbRKT_>
  400bfa:	84 c0                	test   %al,%al
  400bfc:	74 4f                	je     400c4d <_ZNSt8functionIFvvEEC1IZ4mainEUlvE0_vvEET_+0x81>
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
  400bfe:	48 8d 7d 10          	lea    0x10(%rbp),%rdi
  400c02:	e8 b6 ff ff ff       	callq  400bbd <_ZSt4moveIRZ4mainEUlvE0_EONSt16remove_referenceIT_E4typeEOS3_>
  400c07:	48 89 c2             	mov    %rax,%rdx
  400c0a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  400c0e:	48 89 d6             	mov    %rdx,%rsi
  400c11:	48 89 c7             	mov    %rax,%rdi
  400c14:	e8 aa 01 00 00       	callq  400dc3 <_ZNSt14_Function_base13_Base_managerIZ4mainEUlvE0_E15_M_init_functorERSt9_Any_dataOS1_>
	    _M_invoker = &_My_handler::_M_invoke;
  400c19:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  400c1d:	48 c7 40 18 25 0e 40 	movq   $0x400e25,0x18(%rax)
  400c24:	00 
	    _M_manager = &_My_handler::_M_manager;
  400c25:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  400c29:	48 c7 40 10 48 0e 40 	movq   $0x400e48,0x10(%rax)
  400c30:	00 
	  }
      }
  400c31:	eb 1a                	jmp    400c4d <_ZNSt8functionIFvvEEC1IZ4mainEUlvE0_vvEET_+0x81>
  400c33:	48 89 c3             	mov    %rax,%rbx

  template<typename _Res, typename... _ArgTypes>
    template<typename _Functor, typename, typename>
      function<_Res(_ArgTypes...)>::
      function(_Functor __f)
      : _Function_base()
  400c36:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  400c3a:	48 89 c7             	mov    %rax,%rdi
  400c3d:	e8 46 05 00 00       	callq  401188 <_ZNSt14_Function_baseD1Ev>
  400c42:	48 89 d8             	mov    %rbx,%rax
  400c45:	48 89 c7             	mov    %rax,%rdi
  400c48:	e8 43 fb ff ff       	callq  400790 <_Unwind_Resume@plt>
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
	  }
      }
  400c4d:	90                   	nop
  400c4e:	48 83 c4 18          	add    $0x18,%rsp
  400c52:	5b                   	pop    %rbx
  400c53:	5d                   	pop    %rbp
  400c54:	c3                   	retq   

0000000000400c55 <_ZNSt14_Function_base13_Base_managerIZ4mainEUlvE_E21_M_not_empty_functionIS1_EEbRKT_>:
	  _M_not_empty_function(_Tp _Class::* const& __mp)
	  { return __mp; }

	template<typename _Tp>
	  static bool
	  _M_not_empty_function(const _Tp&)
  400c55:	55                   	push   %rbp
  400c56:	48 89 e5             	mov    %rsp,%rbp
  400c59:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	  { return true; }
  400c5d:	b8 01 00 00 00       	mov    $0x1,%eax
  400c62:	5d                   	pop    %rbp
  400c63:	c3                   	retq   

0000000000400c64 <_ZNSt14_Function_base13_Base_managerIZ4mainEUlvE_E15_M_init_functorERSt9_Any_dataOS1_>:
	    }
	  return false;
	}

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f)
  400c64:	55                   	push   %rbp
  400c65:	48 89 e5             	mov    %rsp,%rbp
  400c68:	53                   	push   %rbx
  400c69:	48 83 ec 28          	sub    $0x28,%rsp
  400c6d:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  400c71:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  400c75:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  400c7c:	00 00 
  400c7e:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  400c82:	31 c0                	xor    %eax,%eax
	{ _M_init_functor(__functor, std::move(__f), _Local_storage()); }
  400c84:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  400c88:	48 89 c7             	mov    %rax,%rdi
  400c8b:	e8 96 fe ff ff       	callq  400b26 <_ZSt4moveIRZ4mainEUlvE_EONSt16remove_referenceIT_E4typeEOS3_>
  400c90:	48 89 c2             	mov    %rax,%rdx
  400c93:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  400c97:	48 83 ec 08          	sub    $0x8,%rsp
  400c9b:	53                   	push   %rbx
  400c9c:	48 89 d6             	mov    %rdx,%rsi
  400c9f:	48 89 c7             	mov    %rax,%rdi
  400ca2:	e8 6c 02 00 00       	callq  400f13 <_ZNSt14_Function_base13_Base_managerIZ4mainEUlvE_E15_M_init_functorERSt9_Any_dataOS1_St17integral_constantIbLb1EE>
  400ca7:	48 83 c4 10          	add    $0x10,%rsp
  400cab:	90                   	nop
  400cac:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  400cb0:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
  400cb7:	00 00 
  400cb9:	74 05                	je     400cc0 <_ZNSt14_Function_base13_Base_managerIZ4mainEUlvE_E15_M_init_functorERSt9_Any_dataOS1_+0x5c>
  400cbb:	e8 a0 fa ff ff       	callq  400760 <__stack_chk_fail@plt>
  400cc0:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  400cc4:	c9                   	leaveq 
  400cc5:	c3                   	retq   

0000000000400cc6 <_ZNSt17_Function_handlerIFvvEZ4mainEUlvE_E9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
  400cc6:	55                   	push   %rbp
  400cc7:	48 89 e5             	mov    %rsp,%rbp
  400cca:	48 83 ec 10          	sub    $0x10,%rsp
  400cce:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      {
	(*_Base::_M_get_pointer(__functor))(
  400cd2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  400cd6:	48 89 c7             	mov    %rax,%rdi
  400cd9:	e8 70 02 00 00       	callq  400f4e <_ZNSt14_Function_base13_Base_managerIZ4mainEUlvE_E14_M_get_pointerERKSt9_Any_data>
  400cde:	48 89 c7             	mov    %rax,%rdi
  400ce1:	e8 7e fc ff ff       	callq  400964 <_ZZ4mainENKUlvE_clEv>
	    std::forward<_ArgTypes>(__args)...);
      }
  400ce6:	90                   	nop
  400ce7:	c9                   	leaveq 
  400ce8:	c3                   	retq   

0000000000400ce9 <_ZNSt14_Function_base13_Base_managerIZ4mainEUlvE_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation>:
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
  400ce9:	55                   	push   %rbp
  400cea:	48 89 e5             	mov    %rsp,%rbp
  400ced:	53                   	push   %rbx
  400cee:	48 83 ec 38          	sub    $0x38,%rsp
  400cf2:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  400cf6:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  400cfa:	89 55 cc             	mov    %edx,-0x34(%rbp)
  400cfd:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  400d04:	00 00 
  400d06:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  400d0a:	31 c0                	xor    %eax,%eax
		   _Manager_operation __op)
	{
	  switch (__op)
  400d0c:	8b 45 cc             	mov    -0x34(%rbp),%eax
  400d0f:	83 f8 01             	cmp    $0x1,%eax
  400d12:	74 2c                	je     400d40 <_ZNSt14_Function_base13_Base_managerIZ4mainEUlvE_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x57>
  400d14:	83 f8 01             	cmp    $0x1,%eax
  400d17:	7f 06                	jg     400d1f <_ZNSt14_Function_base13_Base_managerIZ4mainEUlvE_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x36>
  400d19:	85 c0                	test   %eax,%eax
  400d1b:	74 0e                	je     400d2b <_ZNSt14_Function_base13_Base_managerIZ4mainEUlvE_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x42>
  400d1d:	eb 76                	jmp    400d95 <_ZNSt14_Function_base13_Base_managerIZ4mainEUlvE_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0xac>
  400d1f:	83 f8 02             	cmp    $0x2,%eax
  400d22:	74 3c                	je     400d60 <_ZNSt14_Function_base13_Base_managerIZ4mainEUlvE_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x77>
  400d24:	83 f8 03             	cmp    $0x3,%eax
  400d27:	74 56                	je     400d7f <_ZNSt14_Function_base13_Base_managerIZ4mainEUlvE_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x96>
  400d29:	eb 6a                	jmp    400d95 <_ZNSt14_Function_base13_Base_managerIZ4mainEUlvE_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0xac>
	    {
#if __cpp_rtti
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
  400d2b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  400d2f:	48 89 c7             	mov    %rax,%rdi
  400d32:	e8 d5 06 00 00       	callq  40140c <_ZNSt9_Any_data9_M_accessIPKSt9type_infoEERT_v>
  400d37:	48 c7 00 f0 14 40 00 	movq   $0x4014f0,(%rax)
	      break;
  400d3e:	eb 55                	jmp    400d95 <_ZNSt14_Function_base13_Base_managerIZ4mainEUlvE_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0xac>
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
  400d40:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  400d44:	48 89 c7             	mov    %rax,%rdi
  400d47:	e8 2c 02 00 00       	callq  400f78 <_ZNSt9_Any_data9_M_accessIPZ4mainEUlvE_EERT_v>
  400d4c:	48 89 c3             	mov    %rax,%rbx
  400d4f:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  400d53:	48 89 c7             	mov    %rax,%rdi
  400d56:	e8 f3 01 00 00       	callq  400f4e <_ZNSt14_Function_base13_Base_managerIZ4mainEUlvE_E14_M_get_pointerERKSt9_Any_data>
  400d5b:	48 89 03             	mov    %rax,(%rbx)
	      break;
  400d5e:	eb 35                	jmp    400d95 <_ZNSt14_Function_base13_Base_managerIZ4mainEUlvE_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0xac>

	    case __clone_functor:
	      _M_clone(__dest, __source, _Local_storage());
  400d60:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  400d64:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  400d68:	48 83 ec 08          	sub    $0x8,%rsp
  400d6c:	41 50                	push   %r8
  400d6e:	48 89 d6             	mov    %rdx,%rsi
  400d71:	48 89 c7             	mov    %rax,%rdi
  400d74:	e8 19 02 00 00       	callq  400f92 <_ZNSt14_Function_base13_Base_managerIZ4mainEUlvE_E8_M_cloneERSt9_Any_dataRKS3_St17integral_constantIbLb1EE>
  400d79:	48 83 c4 10          	add    $0x10,%rsp
	      break;
  400d7d:	eb 16                	jmp    400d95 <_ZNSt14_Function_base13_Base_managerIZ4mainEUlvE_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0xac>

	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
  400d7f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  400d83:	48 83 ec 08          	sub    $0x8,%rsp
  400d87:	51                   	push   %rcx
  400d88:	48 89 c7             	mov    %rax,%rdi
  400d8b:	e8 3d 02 00 00       	callq  400fcd <_ZNSt14_Function_base13_Base_managerIZ4mainEUlvE_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>
  400d90:	48 83 c4 10          	add    $0x10,%rsp
	      break;
  400d94:	90                   	nop
	    }
	  return false;
  400d95:	b8 00 00 00 00       	mov    $0x0,%eax
	}
  400d9a:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  400d9e:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
  400da5:	00 00 
  400da7:	74 05                	je     400dae <_ZNSt14_Function_base13_Base_managerIZ4mainEUlvE_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0xc5>
  400da9:	e8 b2 f9 ff ff       	callq  400760 <__stack_chk_fail@plt>
  400dae:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  400db2:	c9                   	leaveq 
  400db3:	c3                   	retq   

0000000000400db4 <_ZNSt14_Function_base13_Base_managerIZ4mainEUlvE0_E21_M_not_empty_functionIS1_EEbRKT_>:
	  _M_not_empty_function(_Tp _Class::* const& __mp)
	  { return __mp; }

	template<typename _Tp>
	  static bool
	  _M_not_empty_function(const _Tp&)
  400db4:	55                   	push   %rbp
  400db5:	48 89 e5             	mov    %rsp,%rbp
  400db8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	  { return true; }
  400dbc:	b8 01 00 00 00       	mov    $0x1,%eax
  400dc1:	5d                   	pop    %rbp
  400dc2:	c3                   	retq   

0000000000400dc3 <_ZNSt14_Function_base13_Base_managerIZ4mainEUlvE0_E15_M_init_functorERSt9_Any_dataOS1_>:
	    }
	  return false;
	}

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f)
  400dc3:	55                   	push   %rbp
  400dc4:	48 89 e5             	mov    %rsp,%rbp
  400dc7:	53                   	push   %rbx
  400dc8:	48 83 ec 28          	sub    $0x28,%rsp
  400dcc:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  400dd0:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  400dd4:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  400ddb:	00 00 
  400ddd:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  400de1:	31 c0                	xor    %eax,%eax
	{ _M_init_functor(__functor, std::move(__f), _Local_storage()); }
  400de3:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  400de7:	48 89 c7             	mov    %rax,%rdi
  400dea:	e8 ce fd ff ff       	callq  400bbd <_ZSt4moveIRZ4mainEUlvE0_EONSt16remove_referenceIT_E4typeEOS3_>
  400def:	48 89 c2             	mov    %rax,%rdx
  400df2:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  400df6:	48 83 ec 08          	sub    $0x8,%rsp
  400dfa:	53                   	push   %rbx
  400dfb:	48 89 d6             	mov    %rdx,%rsi
  400dfe:	48 89 c7             	mov    %rax,%rdi
  400e01:	e8 e2 01 00 00       	callq  400fe8 <_ZNSt14_Function_base13_Base_managerIZ4mainEUlvE0_E15_M_init_functorERSt9_Any_dataOS1_St17integral_constantIbLb1EE>
  400e06:	48 83 c4 10          	add    $0x10,%rsp
  400e0a:	90                   	nop
  400e0b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  400e0f:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
  400e16:	00 00 
  400e18:	74 05                	je     400e1f <_ZNSt14_Function_base13_Base_managerIZ4mainEUlvE0_E15_M_init_functorERSt9_Any_dataOS1_+0x5c>
  400e1a:	e8 41 f9 ff ff       	callq  400760 <__stack_chk_fail@plt>
  400e1f:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  400e23:	c9                   	leaveq 
  400e24:	c3                   	retq   

0000000000400e25 <_ZNSt17_Function_handlerIFvvEZ4mainEUlvE0_E9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
  400e25:	55                   	push   %rbp
  400e26:	48 89 e5             	mov    %rsp,%rbp
  400e29:	48 83 ec 10          	sub    $0x10,%rsp
  400e2d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      {
	(*_Base::_M_get_pointer(__functor))(
  400e31:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  400e35:	48 89 c7             	mov    %rax,%rdi
  400e38:	e8 e6 01 00 00       	callq  401023 <_ZNSt14_Function_base13_Base_managerIZ4mainEUlvE0_E14_M_get_pointerERKSt9_Any_data>
  400e3d:	48 89 c7             	mov    %rax,%rdi
  400e40:	e8 2b fb ff ff       	callq  400970 <_ZZ4mainENKUlvE0_clEv>
	    std::forward<_ArgTypes>(__args)...);
      }
  400e45:	90                   	nop
  400e46:	c9                   	leaveq 
  400e47:	c3                   	retq   

0000000000400e48 <_ZNSt14_Function_base13_Base_managerIZ4mainEUlvE0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation>:
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
  400e48:	55                   	push   %rbp
  400e49:	48 89 e5             	mov    %rsp,%rbp
  400e4c:	53                   	push   %rbx
  400e4d:	48 83 ec 38          	sub    $0x38,%rsp
  400e51:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  400e55:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  400e59:	89 55 cc             	mov    %edx,-0x34(%rbp)
  400e5c:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  400e63:	00 00 
  400e65:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  400e69:	31 c0                	xor    %eax,%eax
		   _Manager_operation __op)
	{
	  switch (__op)
  400e6b:	8b 45 cc             	mov    -0x34(%rbp),%eax
  400e6e:	83 f8 01             	cmp    $0x1,%eax
  400e71:	74 2c                	je     400e9f <_ZNSt14_Function_base13_Base_managerIZ4mainEUlvE0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x57>
  400e73:	83 f8 01             	cmp    $0x1,%eax
  400e76:	7f 06                	jg     400e7e <_ZNSt14_Function_base13_Base_managerIZ4mainEUlvE0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x36>
  400e78:	85 c0                	test   %eax,%eax
  400e7a:	74 0e                	je     400e8a <_ZNSt14_Function_base13_Base_managerIZ4mainEUlvE0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x42>
  400e7c:	eb 76                	jmp    400ef4 <_ZNSt14_Function_base13_Base_managerIZ4mainEUlvE0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0xac>
  400e7e:	83 f8 02             	cmp    $0x2,%eax
  400e81:	74 3c                	je     400ebf <_ZNSt14_Function_base13_Base_managerIZ4mainEUlvE0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x77>
  400e83:	83 f8 03             	cmp    $0x3,%eax
  400e86:	74 56                	je     400ede <_ZNSt14_Function_base13_Base_managerIZ4mainEUlvE0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x96>
  400e88:	eb 6a                	jmp    400ef4 <_ZNSt14_Function_base13_Base_managerIZ4mainEUlvE0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0xac>
	    {
#if __cpp_rtti
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
  400e8a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  400e8e:	48 89 c7             	mov    %rax,%rdi
  400e91:	e8 76 05 00 00       	callq  40140c <_ZNSt9_Any_data9_M_accessIPKSt9type_infoEERT_v>
  400e96:	48 c7 00 d0 14 40 00 	movq   $0x4014d0,(%rax)
	      break;
  400e9d:	eb 55                	jmp    400ef4 <_ZNSt14_Function_base13_Base_managerIZ4mainEUlvE0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0xac>
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
  400e9f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  400ea3:	48 89 c7             	mov    %rax,%rdi
  400ea6:	e8 a3 01 00 00       	callq  40104e <_ZNSt9_Any_data9_M_accessIPZ4mainEUlvE0_EERT_v>
  400eab:	48 89 c3             	mov    %rax,%rbx
  400eae:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  400eb2:	48 89 c7             	mov    %rax,%rdi
  400eb5:	e8 69 01 00 00       	callq  401023 <_ZNSt14_Function_base13_Base_managerIZ4mainEUlvE0_E14_M_get_pointerERKSt9_Any_data>
  400eba:	48 89 03             	mov    %rax,(%rbx)
	      break;
  400ebd:	eb 35                	jmp    400ef4 <_ZNSt14_Function_base13_Base_managerIZ4mainEUlvE0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0xac>

	    case __clone_functor:
	      _M_clone(__dest, __source, _Local_storage());
  400ebf:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  400ec3:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  400ec7:	48 83 ec 08          	sub    $0x8,%rsp
  400ecb:	41 50                	push   %r8
  400ecd:	48 89 d6             	mov    %rdx,%rsi
  400ed0:	48 89 c7             	mov    %rax,%rdi
  400ed3:	e8 90 01 00 00       	callq  401068 <_ZNSt14_Function_base13_Base_managerIZ4mainEUlvE0_E8_M_cloneERSt9_Any_dataRKS3_St17integral_constantIbLb1EE>
  400ed8:	48 83 c4 10          	add    $0x10,%rsp
	      break;
  400edc:	eb 16                	jmp    400ef4 <_ZNSt14_Function_base13_Base_managerIZ4mainEUlvE0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0xac>

	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
  400ede:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  400ee2:	48 83 ec 08          	sub    $0x8,%rsp
  400ee6:	51                   	push   %rcx
  400ee7:	48 89 c7             	mov    %rax,%rdi
  400eea:	e8 b4 01 00 00       	callq  4010a3 <_ZNSt14_Function_base13_Base_managerIZ4mainEUlvE0_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>
  400eef:	48 83 c4 10          	add    $0x10,%rsp
	      break;
  400ef3:	90                   	nop
	    }
	  return false;
  400ef4:	b8 00 00 00 00       	mov    $0x0,%eax
	}
  400ef9:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  400efd:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
  400f04:	00 00 
  400f06:	74 05                	je     400f0d <_ZNSt14_Function_base13_Base_managerIZ4mainEUlvE0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0xc5>
  400f08:	e8 53 f8 ff ff       	callq  400760 <__stack_chk_fail@plt>
  400f0d:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  400f11:	c9                   	leaveq 
  400f12:	c3                   	retq   

0000000000400f13 <_ZNSt14_Function_base13_Base_managerIZ4mainEUlvE_E15_M_init_functorERSt9_Any_dataOS1_St17integral_constantIbLb1EE>:
	  _M_not_empty_function(const _Tp&)
	  { return true; }

      private:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
  400f13:	55                   	push   %rbp
  400f14:	48 89 e5             	mov    %rsp,%rbp
  400f17:	48 83 ec 10          	sub    $0x10,%rsp
  400f1b:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  400f1f:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }
  400f23:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  400f27:	48 89 c7             	mov    %rax,%rdi
  400f2a:	e8 f7 fb ff ff       	callq  400b26 <_ZSt4moveIRZ4mainEUlvE_EONSt16remove_referenceIT_E4typeEOS3_>
  400f2f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  400f33:	48 89 c7             	mov    %rax,%rdi
  400f36:	e8 19 02 00 00       	callq  401154 <_ZNSt9_Any_data9_M_accessEv>
  400f3b:	48 89 c6             	mov    %rax,%rsi
  400f3e:	bf 01 00 00 00       	mov    $0x1,%edi
  400f43:	e8 fa 01 00 00       	callq  401142 <_ZnwmPv>
  400f48:	48 85 c0             	test   %rax,%rax
  400f4b:	90                   	nop
  400f4c:	c9                   	leaveq 
  400f4d:	c3                   	retq   

0000000000400f4e <_ZNSt14_Function_base13_Base_managerIZ4mainEUlvE_E14_M_get_pointerERKSt9_Any_data>:

	typedef integral_constant<bool, __stored_locally> _Local_storage;

	// Retrieve a pointer to the function object
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
  400f4e:	55                   	push   %rbp
  400f4f:	48 89 e5             	mov    %rsp,%rbp
  400f52:	48 83 ec 20          	sub    $0x20,%rsp
  400f56:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
  400f5a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  400f5e:	48 89 c7             	mov    %rax,%rdi
  400f61:	e8 58 01 00 00       	callq  4010be <_ZNKSt9_Any_data9_M_accessIZ4mainEUlvE_EERKT_v>
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
  400f66:	48 89 c7             	mov    %rax,%rdi
  400f69:	e8 6a 01 00 00       	callq  4010d8 <_ZSt11__addressofIKZ4mainEUlvE_EPT_RS2_>
  400f6e:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	  return const_cast<_Functor*>(__ptr);
  400f72:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
	}
  400f76:	c9                   	leaveq 
  400f77:	c3                   	retq   

0000000000400f78 <_ZNSt9_Any_data9_M_accessIPZ4mainEUlvE_EERT_v>:
    void*       _M_access()       { return &_M_pod_data[0]; }
    const void* _M_access() const { return &_M_pod_data[0]; }

    template<typename _Tp>
      _Tp&
      _M_access()
  400f78:	55                   	push   %rbp
  400f79:	48 89 e5             	mov    %rsp,%rbp
  400f7c:	48 83 ec 10          	sub    $0x10,%rsp
  400f80:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return *static_cast<_Tp*>(_M_access()); }
  400f84:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  400f88:	48 89 c7             	mov    %rax,%rdi
  400f8b:	e8 c4 01 00 00       	callq  401154 <_ZNSt9_Any_data9_M_accessEv>
  400f90:	c9                   	leaveq 
  400f91:	c3                   	retq   

0000000000400f92 <_ZNSt14_Function_base13_Base_managerIZ4mainEUlvE_E8_M_cloneERSt9_Any_dataRKS3_St17integral_constantIbLb1EE>:
	}

	// Clone a location-invariant function object that fits within
	// an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
  400f92:	55                   	push   %rbp
  400f93:	48 89 e5             	mov    %rsp,%rbp
  400f96:	48 83 ec 10          	sub    $0x10,%rsp
  400f9a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  400f9e:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	{
	  new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
  400fa2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  400fa6:	48 89 c7             	mov    %rax,%rdi
  400fa9:	e8 10 01 00 00       	callq  4010be <_ZNKSt9_Any_data9_M_accessIZ4mainEUlvE_EERKT_v>
  400fae:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  400fb2:	48 89 c7             	mov    %rax,%rdi
  400fb5:	e8 9a 01 00 00       	callq  401154 <_ZNSt9_Any_data9_M_accessEv>
  400fba:	48 89 c6             	mov    %rax,%rsi
  400fbd:	bf 01 00 00 00       	mov    $0x1,%edi
  400fc2:	e8 7b 01 00 00       	callq  401142 <_ZnwmPv>
  400fc7:	48 85 c0             	test   %rax,%rax
	}
  400fca:	90                   	nop
  400fcb:	c9                   	leaveq 
  400fcc:	c3                   	retq   

0000000000400fcd <_ZNSt14_Function_base13_Base_managerIZ4mainEUlvE_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>:
	}

	// Destroying a location-invariant object may still require
	// destruction.
	static void
	_M_destroy(_Any_data& __victim, true_type)
  400fcd:	55                   	push   %rbp
  400fce:	48 89 e5             	mov    %rsp,%rbp
  400fd1:	48 83 ec 10          	sub    $0x10,%rsp
  400fd5:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	{
	  __victim._M_access<_Functor>().~_Functor();
  400fd9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  400fdd:	48 89 c7             	mov    %rax,%rdi
  400fe0:	e8 01 01 00 00       	callq  4010e6 <_ZNSt9_Any_data9_M_accessIZ4mainEUlvE_EERT_v>
	}
  400fe5:	90                   	nop
  400fe6:	c9                   	leaveq 
  400fe7:	c3                   	retq   

0000000000400fe8 <_ZNSt14_Function_base13_Base_managerIZ4mainEUlvE0_E15_M_init_functorERSt9_Any_dataOS1_St17integral_constantIbLb1EE>:
	  _M_not_empty_function(const _Tp&)
	  { return true; }

      private:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
  400fe8:	55                   	push   %rbp
  400fe9:	48 89 e5             	mov    %rsp,%rbp
  400fec:	48 83 ec 10          	sub    $0x10,%rsp
  400ff0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  400ff4:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }
  400ff8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  400ffc:	48 89 c7             	mov    %rax,%rdi
  400fff:	e8 b9 fb ff ff       	callq  400bbd <_ZSt4moveIRZ4mainEUlvE0_EONSt16remove_referenceIT_E4typeEOS3_>
  401004:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  401008:	48 89 c7             	mov    %rax,%rdi
  40100b:	e8 44 01 00 00       	callq  401154 <_ZNSt9_Any_data9_M_accessEv>
  401010:	48 89 c6             	mov    %rax,%rsi
  401013:	bf 01 00 00 00       	mov    $0x1,%edi
  401018:	e8 25 01 00 00       	callq  401142 <_ZnwmPv>
  40101d:	48 85 c0             	test   %rax,%rax
  401020:	90                   	nop
  401021:	c9                   	leaveq 
  401022:	c3                   	retq   

0000000000401023 <_ZNSt14_Function_base13_Base_managerIZ4mainEUlvE0_E14_M_get_pointerERKSt9_Any_data>:

	typedef integral_constant<bool, __stored_locally> _Local_storage;

	// Retrieve a pointer to the function object
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
  401023:	55                   	push   %rbp
  401024:	48 89 e5             	mov    %rsp,%rbp
  401027:	48 83 ec 20          	sub    $0x20,%rsp
  40102b:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
  40102f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  401033:	48 89 c7             	mov    %rax,%rdi
  401036:	e8 c5 00 00 00       	callq  401100 <_ZNKSt9_Any_data9_M_accessIZ4mainEUlvE0_EERKT_v>
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
  40103b:	48 89 c7             	mov    %rax,%rdi
  40103e:	e8 d7 00 00 00       	callq  40111a <_ZSt11__addressofIKZ4mainEUlvE0_EPT_RS2_>
  401043:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	  return const_cast<_Functor*>(__ptr);
  401047:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
	}
  40104b:	c9                   	leaveq 
  40104c:	c3                   	retq   
  40104d:	90                   	nop

000000000040104e <_ZNSt9_Any_data9_M_accessIPZ4mainEUlvE0_EERT_v>:
    void*       _M_access()       { return &_M_pod_data[0]; }
    const void* _M_access() const { return &_M_pod_data[0]; }

    template<typename _Tp>
      _Tp&
      _M_access()
  40104e:	55                   	push   %rbp
  40104f:	48 89 e5             	mov    %rsp,%rbp
  401052:	48 83 ec 10          	sub    $0x10,%rsp
  401056:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return *static_cast<_Tp*>(_M_access()); }
  40105a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40105e:	48 89 c7             	mov    %rax,%rdi
  401061:	e8 ee 00 00 00       	callq  401154 <_ZNSt9_Any_data9_M_accessEv>
  401066:	c9                   	leaveq 
  401067:	c3                   	retq   

0000000000401068 <_ZNSt14_Function_base13_Base_managerIZ4mainEUlvE0_E8_M_cloneERSt9_Any_dataRKS3_St17integral_constantIbLb1EE>:
	}

	// Clone a location-invariant function object that fits within
	// an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
  401068:	55                   	push   %rbp
  401069:	48 89 e5             	mov    %rsp,%rbp
  40106c:	48 83 ec 10          	sub    $0x10,%rsp
  401070:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  401074:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	{
	  new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
  401078:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40107c:	48 89 c7             	mov    %rax,%rdi
  40107f:	e8 7c 00 00 00       	callq  401100 <_ZNKSt9_Any_data9_M_accessIZ4mainEUlvE0_EERKT_v>
  401084:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  401088:	48 89 c7             	mov    %rax,%rdi
  40108b:	e8 c4 00 00 00       	callq  401154 <_ZNSt9_Any_data9_M_accessEv>
  401090:	48 89 c6             	mov    %rax,%rsi
  401093:	bf 01 00 00 00       	mov    $0x1,%edi
  401098:	e8 a5 00 00 00       	callq  401142 <_ZnwmPv>
  40109d:	48 85 c0             	test   %rax,%rax
	}
  4010a0:	90                   	nop
  4010a1:	c9                   	leaveq 
  4010a2:	c3                   	retq   

00000000004010a3 <_ZNSt14_Function_base13_Base_managerIZ4mainEUlvE0_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>:
	}

	// Destroying a location-invariant object may still require
	// destruction.
	static void
	_M_destroy(_Any_data& __victim, true_type)
  4010a3:	55                   	push   %rbp
  4010a4:	48 89 e5             	mov    %rsp,%rbp
  4010a7:	48 83 ec 10          	sub    $0x10,%rsp
  4010ab:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	{
	  __victim._M_access<_Functor>().~_Functor();
  4010af:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4010b3:	48 89 c7             	mov    %rax,%rdi
  4010b6:	e8 6d 00 00 00       	callq  401128 <_ZNSt9_Any_data9_M_accessIZ4mainEUlvE0_EERT_v>
	}
  4010bb:	90                   	nop
  4010bc:	c9                   	leaveq 
  4010bd:	c3                   	retq   

00000000004010be <_ZNKSt9_Any_data9_M_accessIZ4mainEUlvE_EERKT_v>:
      _M_access()
      { return *static_cast<_Tp*>(_M_access()); }

    template<typename _Tp>
      const _Tp&
      _M_access() const
  4010be:	55                   	push   %rbp
  4010bf:	48 89 e5             	mov    %rsp,%rbp
  4010c2:	48 83 ec 10          	sub    $0x10,%rsp
  4010c6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return *static_cast<const _Tp*>(_M_access()); }
  4010ca:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4010ce:	48 89 c7             	mov    %rax,%rdi
  4010d1:	e8 8c 00 00 00       	callq  401162 <_ZNKSt9_Any_data9_M_accessEv>
  4010d6:	c9                   	leaveq 
  4010d7:	c3                   	retq   

00000000004010d8 <_ZSt11__addressofIKZ4mainEUlvE_EPT_RS2_>:
   *  @brief Same as C++11 std::addressof
   *  @ingroup utilities
   */
  template<typename _Tp>
    inline _Tp*
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
  4010d8:	55                   	push   %rbp
  4010d9:	48 89 e5             	mov    %rsp,%rbp
  4010dc:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    {
      return reinterpret_cast<_Tp*>
	(&const_cast<char&>(reinterpret_cast<const volatile char&>(__r)));
  4010e0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    }
  4010e4:	5d                   	pop    %rbp
  4010e5:	c3                   	retq   

00000000004010e6 <_ZNSt9_Any_data9_M_accessIZ4mainEUlvE_EERT_v>:
    void*       _M_access()       { return &_M_pod_data[0]; }
    const void* _M_access() const { return &_M_pod_data[0]; }

    template<typename _Tp>
      _Tp&
      _M_access()
  4010e6:	55                   	push   %rbp
  4010e7:	48 89 e5             	mov    %rsp,%rbp
  4010ea:	48 83 ec 10          	sub    $0x10,%rsp
  4010ee:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return *static_cast<_Tp*>(_M_access()); }
  4010f2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4010f6:	48 89 c7             	mov    %rax,%rdi
  4010f9:	e8 56 00 00 00       	callq  401154 <_ZNSt9_Any_data9_M_accessEv>
  4010fe:	c9                   	leaveq 
  4010ff:	c3                   	retq   

0000000000401100 <_ZNKSt9_Any_data9_M_accessIZ4mainEUlvE0_EERKT_v>:

    template<typename _Tp>
      const _Tp&
      _M_access() const
  401100:	55                   	push   %rbp
  401101:	48 89 e5             	mov    %rsp,%rbp
  401104:	48 83 ec 10          	sub    $0x10,%rsp
  401108:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return *static_cast<const _Tp*>(_M_access()); }
  40110c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  401110:	48 89 c7             	mov    %rax,%rdi
  401113:	e8 4a 00 00 00       	callq  401162 <_ZNKSt9_Any_data9_M_accessEv>
  401118:	c9                   	leaveq 
  401119:	c3                   	retq   

000000000040111a <_ZSt11__addressofIKZ4mainEUlvE0_EPT_RS2_>:
   *  @brief Same as C++11 std::addressof
   *  @ingroup utilities
   */
  template<typename _Tp>
    inline _Tp*
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
  40111a:	55                   	push   %rbp
  40111b:	48 89 e5             	mov    %rsp,%rbp
  40111e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    {
      return reinterpret_cast<_Tp*>
	(&const_cast<char&>(reinterpret_cast<const volatile char&>(__r)));
  401122:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    }
  401126:	5d                   	pop    %rbp
  401127:	c3                   	retq   

0000000000401128 <_ZNSt9_Any_data9_M_accessIZ4mainEUlvE0_EERT_v>:
    void*       _M_access()       { return &_M_pod_data[0]; }
    const void* _M_access() const { return &_M_pod_data[0]; }

    template<typename _Tp>
      _Tp&
      _M_access()
  401128:	55                   	push   %rbp
  401129:	48 89 e5             	mov    %rsp,%rbp
  40112c:	48 83 ec 10          	sub    $0x10,%rsp
  401130:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return *static_cast<_Tp*>(_M_access()); }
  401134:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  401138:	48 89 c7             	mov    %rax,%rdi
  40113b:	e8 14 00 00 00       	callq  401154 <_ZNSt9_Any_data9_M_accessEv>
  401140:	c9                   	leaveq 
  401141:	c3                   	retq   

0000000000401142 <_ZnwmPv>:
void operator delete[](void*, const std::nothrow_t&) _GLIBCXX_USE_NOEXCEPT
  __attribute__((__externally_visible__));

// Default placement versions of operator new.
inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
  401142:	55                   	push   %rbp
  401143:	48 89 e5             	mov    %rsp,%rbp
  401146:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40114a:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  40114e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  401152:	5d                   	pop    %rbp
  401153:	c3                   	retq   

0000000000401154 <_ZNSt9_Any_data9_M_accessEv>:
    void (_Undefined_class::*_M_member_pointer)();
  };

  union _Any_data
  {
    void*       _M_access()       { return &_M_pod_data[0]; }
  401154:	55                   	push   %rbp
  401155:	48 89 e5             	mov    %rsp,%rbp
  401158:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40115c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  401160:	5d                   	pop    %rbp
  401161:	c3                   	retq   

0000000000401162 <_ZNKSt9_Any_data9_M_accessEv>:
    const void* _M_access() const { return &_M_pod_data[0]; }
  401162:	55                   	push   %rbp
  401163:	48 89 e5             	mov    %rsp,%rbp
  401166:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40116a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40116e:	5d                   	pop    %rbp
  40116f:	c3                   	retq   

0000000000401170 <_ZNSt14_Function_baseC1Ev>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
  401170:	55                   	push   %rbp
  401171:	48 89 e5             	mov    %rsp,%rbp
  401174:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  401178:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40117c:	48 c7 40 10 00 00 00 	movq   $0x0,0x10(%rax)
  401183:	00 
  401184:	90                   	nop
  401185:	5d                   	pop    %rbp
  401186:	c3                   	retq   
  401187:	90                   	nop

0000000000401188 <_ZNSt14_Function_baseD1Ev>:

    ~_Function_base()
  401188:	55                   	push   %rbp
  401189:	48 89 e5             	mov    %rsp,%rbp
  40118c:	48 83 ec 10          	sub    $0x10,%rsp
  401190:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    {
      if (_M_manager)
  401194:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  401198:	48 8b 40 10          	mov    0x10(%rax),%rax
  40119c:	48 85 c0             	test   %rax,%rax
  40119f:	74 1a                	je     4011bb <_ZNSt14_Function_baseD1Ev+0x33>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
  4011a1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4011a5:	48 8b 40 10          	mov    0x10(%rax),%rax
  4011a9:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  4011ad:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
  4011b1:	ba 03 00 00 00       	mov    $0x3,%edx
  4011b6:	48 89 cf             	mov    %rcx,%rdi
  4011b9:	ff d0                	callq  *%rax
    }
  4011bb:	90                   	nop
  4011bc:	c9                   	leaveq 
  4011bd:	c3                   	retq   

00000000004011be <_ZNSt8functionIFvvEED1Ev>:
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
  4011be:	55                   	push   %rbp
  4011bf:	48 89 e5             	mov    %rsp,%rbp
  4011c2:	48 83 ec 10          	sub    $0x10,%rsp
  4011c6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4011ca:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4011ce:	48 89 c7             	mov    %rax,%rdi
  4011d1:	e8 b2 ff ff ff       	callq  401188 <_ZNSt14_Function_baseD1Ev>
  4011d6:	90                   	nop
  4011d7:	c9                   	leaveq 
  4011d8:	c3                   	retq   
  4011d9:	90                   	nop

00000000004011da <_ZNSt31_Maybe_unary_or_binary_functionIvIEEC1Ev>:
   * Derives from @c unary_function or @c binary_function, or perhaps
   * nothing, depending on the number of arguments provided. The
   * primary template is the basis case, which derives nothing.
   */
  template<typename _Res, typename... _ArgTypes>
    struct _Maybe_unary_or_binary_function { };
  4011da:	55                   	push   %rbp
  4011db:	48 89 e5             	mov    %rsp,%rbp
  4011de:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4011e2:	90                   	nop
  4011e3:	5d                   	pop    %rbp
  4011e4:	c3                   	retq   
  4011e5:	90                   	nop

00000000004011e6 <_ZNSt8functionIFvvEEC1Ev>:

      /**
       *  @brief Default construct creates an empty function call wrapper.
       *  @post @c !(bool)*this
       */
      function() noexcept
  4011e6:	55                   	push   %rbp
  4011e7:	48 89 e5             	mov    %rsp,%rbp
  4011ea:	48 83 ec 10          	sub    $0x10,%rsp
  4011ee:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      : _Function_base() { }
  4011f2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4011f6:	48 89 c7             	mov    %rax,%rdi
  4011f9:	e8 dc ff ff ff       	callq  4011da <_ZNSt31_Maybe_unary_or_binary_functionIvIEEC1Ev>
  4011fe:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  401202:	48 89 c7             	mov    %rax,%rdi
  401205:	e8 66 ff ff ff       	callq  401170 <_ZNSt14_Function_baseC1Ev>
  40120a:	90                   	nop
  40120b:	c9                   	leaveq 
  40120c:	c3                   	retq   
  40120d:	90                   	nop

000000000040120e <_ZNSt8functionIFvvEE4swapERS1_>:
       *  @param __x A %function with identical call signature.
       *
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
  40120e:	55                   	push   %rbp
  40120f:	48 89 e5             	mov    %rsp,%rbp
  401212:	48 83 ec 10          	sub    $0x10,%rsp
  401216:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40121a:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      {
	std::swap(_M_functor, __x._M_functor);
  40121e:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  401222:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  401226:	48 89 d6             	mov    %rdx,%rsi
  401229:	48 89 c7             	mov    %rax,%rdi
  40122c:	e8 47 00 00 00       	callq  401278 <_ZSt4swapISt9_Any_dataEvRT_S2_>
	std::swap(_M_manager, __x._M_manager);
  401231:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  401235:	48 8d 50 10          	lea    0x10(%rax),%rdx
  401239:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40123d:	48 83 c0 10          	add    $0x10,%rax
  401241:	48 89 d6             	mov    %rdx,%rsi
  401244:	48 89 c7             	mov    %rax,%rdi
  401247:	e8 c7 00 00 00       	callq  401313 <_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEEvRT_S8_>
	std::swap(_M_invoker, __x._M_invoker);
  40124c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  401250:	48 8d 50 18          	lea    0x18(%rax),%rdx
  401254:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  401258:	48 83 c0 18          	add    $0x18,%rax
  40125c:	48 89 d6             	mov    %rdx,%rsi
  40125f:	48 89 c7             	mov    %rax,%rdi
  401262:	e8 2f 01 00 00       	callq  401396 <_ZSt4swapIPFvRKSt9_Any_dataEEvRT_S6_>
      }
  401267:	90                   	nop
  401268:	c9                   	leaveq 
  401269:	c3                   	retq   

000000000040126a <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
  40126a:	55                   	push   %rbp
  40126b:	48 89 e5             	mov    %rsp,%rbp
  40126e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
  401272:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  401276:	5d                   	pop    %rbp
  401277:	c3                   	retq   

0000000000401278 <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
  401278:	55                   	push   %rbp
  401279:	48 89 e5             	mov    %rsp,%rbp
  40127c:	48 83 ec 30          	sub    $0x30,%rsp
  401280:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  401284:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  401288:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  40128f:	00 00 
  401291:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  401295:	31 c0                	xor    %eax,%eax
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
  401297:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40129b:	48 89 c7             	mov    %rax,%rdi
  40129e:	e8 c7 ff ff ff       	callq  40126a <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
  4012a3:	48 8b 50 08          	mov    0x8(%rax),%rdx
  4012a7:	48 8b 00             	mov    (%rax),%rax
  4012aa:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  4012ae:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      __a = _GLIBCXX_MOVE(__b);
  4012b2:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  4012b6:	48 89 c7             	mov    %rax,%rdi
  4012b9:	e8 ac ff ff ff       	callq  40126a <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
  4012be:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  4012c2:	48 8b 50 08          	mov    0x8(%rax),%rdx
  4012c6:	48 8b 00             	mov    (%rax),%rax
  4012c9:	48 89 01             	mov    %rax,(%rcx)
  4012cc:	48 89 51 08          	mov    %rdx,0x8(%rcx)
      __b = _GLIBCXX_MOVE(__tmp);
  4012d0:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  4012d4:	48 89 c7             	mov    %rax,%rdi
  4012d7:	e8 8e ff ff ff       	callq  40126a <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
  4012dc:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
  4012e0:	48 8b 50 08          	mov    0x8(%rax),%rdx
  4012e4:	48 8b 00             	mov    (%rax),%rax
  4012e7:	48 89 01             	mov    %rax,(%rcx)
  4012ea:	48 89 51 08          	mov    %rdx,0x8(%rcx)
    }
  4012ee:	90                   	nop
  4012ef:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4012f3:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
  4012fa:	00 00 
  4012fc:	74 05                	je     401303 <_ZSt4swapISt9_Any_dataEvRT_S2_+0x8b>
  4012fe:	e8 5d f4 ff ff       	callq  400760 <__stack_chk_fail@plt>
  401303:	c9                   	leaveq 
  401304:	c3                   	retq   

0000000000401305 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
  401305:	55                   	push   %rbp
  401306:	48 89 e5             	mov    %rsp,%rbp
  401309:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
  40130d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  401311:	5d                   	pop    %rbp
  401312:	c3                   	retq   

0000000000401313 <_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEEvRT_S8_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
  401313:	55                   	push   %rbp
  401314:	48 89 e5             	mov    %rsp,%rbp
  401317:	48 83 ec 20          	sub    $0x20,%rsp
  40131b:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  40131f:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  401323:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  40132a:	00 00 
  40132c:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  401330:	31 c0                	xor    %eax,%eax
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
  401332:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  401336:	48 89 c7             	mov    %rax,%rdi
  401339:	e8 c7 ff ff ff       	callq  401305 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
  40133e:	48 8b 00             	mov    (%rax),%rax
  401341:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
      __a = _GLIBCXX_MOVE(__b);
  401345:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  401349:	48 89 c7             	mov    %rax,%rdi
  40134c:	e8 b4 ff ff ff       	callq  401305 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
  401351:	48 8b 10             	mov    (%rax),%rdx
  401354:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  401358:	48 89 10             	mov    %rdx,(%rax)
      __b = _GLIBCXX_MOVE(__tmp);
  40135b:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
  40135f:	48 89 c7             	mov    %rax,%rdi
  401362:	e8 9e ff ff ff       	callq  401305 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
  401367:	48 8b 10             	mov    (%rax),%rdx
  40136a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40136e:	48 89 10             	mov    %rdx,(%rax)
    }
  401371:	90                   	nop
  401372:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  401376:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
  40137d:	00 00 
  40137f:	74 05                	je     401386 <_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEEvRT_S8_+0x73>
  401381:	e8 da f3 ff ff       	callq  400760 <__stack_chk_fail@plt>
  401386:	c9                   	leaveq 
  401387:	c3                   	retq   

0000000000401388 <_ZSt4moveIRPFvRKSt9_Any_dataEEONSt16remove_referenceIT_E4typeEOS7_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
  401388:	55                   	push   %rbp
  401389:	48 89 e5             	mov    %rsp,%rbp
  40138c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
  401390:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  401394:	5d                   	pop    %rbp
  401395:	c3                   	retq   

0000000000401396 <_ZSt4swapIPFvRKSt9_Any_dataEEvRT_S6_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
  401396:	55                   	push   %rbp
  401397:	48 89 e5             	mov    %rsp,%rbp
  40139a:	48 83 ec 20          	sub    $0x20,%rsp
  40139e:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  4013a2:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  4013a6:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  4013ad:	00 00 
  4013af:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  4013b3:	31 c0                	xor    %eax,%eax
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
  4013b5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4013b9:	48 89 c7             	mov    %rax,%rdi
  4013bc:	e8 c7 ff ff ff       	callq  401388 <_ZSt4moveIRPFvRKSt9_Any_dataEEONSt16remove_referenceIT_E4typeEOS7_>
  4013c1:	48 8b 00             	mov    (%rax),%rax
  4013c4:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
      __a = _GLIBCXX_MOVE(__b);
  4013c8:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  4013cc:	48 89 c7             	mov    %rax,%rdi
  4013cf:	e8 b4 ff ff ff       	callq  401388 <_ZSt4moveIRPFvRKSt9_Any_dataEEONSt16remove_referenceIT_E4typeEOS7_>
  4013d4:	48 8b 10             	mov    (%rax),%rdx
  4013d7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4013db:	48 89 10             	mov    %rdx,(%rax)
      __b = _GLIBCXX_MOVE(__tmp);
  4013de:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
  4013e2:	48 89 c7             	mov    %rax,%rdi
  4013e5:	e8 9e ff ff ff       	callq  401388 <_ZSt4moveIRPFvRKSt9_Any_dataEEONSt16remove_referenceIT_E4typeEOS7_>
  4013ea:	48 8b 10             	mov    (%rax),%rdx
  4013ed:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  4013f1:	48 89 10             	mov    %rdx,(%rax)
    }
  4013f4:	90                   	nop
  4013f5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4013f9:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
  401400:	00 00 
  401402:	74 05                	je     401409 <_ZSt4swapIPFvRKSt9_Any_dataEEvRT_S6_+0x73>
  401404:	e8 57 f3 ff ff       	callq  400760 <__stack_chk_fail@plt>
  401409:	c9                   	leaveq 
  40140a:	c3                   	retq   
  40140b:	90                   	nop

000000000040140c <_ZNSt9_Any_data9_M_accessIPKSt9type_infoEERT_v>:
    void*       _M_access()       { return &_M_pod_data[0]; }
    const void* _M_access() const { return &_M_pod_data[0]; }

    template<typename _Tp>
      _Tp&
      _M_access()
  40140c:	55                   	push   %rbp
  40140d:	48 89 e5             	mov    %rsp,%rbp
  401410:	48 83 ec 10          	sub    $0x10,%rsp
  401414:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return *static_cast<_Tp*>(_M_access()); }
  401418:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40141c:	48 89 c7             	mov    %rax,%rdi
  40141f:	e8 30 fd ff ff       	callq  401154 <_ZNSt9_Any_data9_M_accessEv>
  401424:	c9                   	leaveq 
  401425:	c3                   	retq   
  401426:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  40142d:	00 00 00 

0000000000401430 <__libc_csu_init>:
  401430:	41 57                	push   %r15
  401432:	41 56                	push   %r14
  401434:	41 89 ff             	mov    %edi,%r15d
  401437:	41 55                	push   %r13
  401439:	41 54                	push   %r12
  40143b:	4c 8d 25 9e 19 20 00 	lea    0x20199e(%rip),%r12        # 602de0 <__frame_dummy_init_array_entry>
  401442:	55                   	push   %rbp
  401443:	48 8d 2d 9e 19 20 00 	lea    0x20199e(%rip),%rbp        # 602de8 <__init_array_end>
  40144a:	53                   	push   %rbx
  40144b:	49 89 f6             	mov    %rsi,%r14
  40144e:	49 89 d5             	mov    %rdx,%r13
  401451:	4c 29 e5             	sub    %r12,%rbp
  401454:	48 83 ec 08          	sub    $0x8,%rsp
  401458:	48 c1 fd 03          	sar    $0x3,%rbp
  40145c:	e8 8f f2 ff ff       	callq  4006f0 <_init>
  401461:	48 85 ed             	test   %rbp,%rbp
  401464:	74 20                	je     401486 <__libc_csu_init+0x56>
  401466:	31 db                	xor    %ebx,%ebx
  401468:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  40146f:	00 
  401470:	4c 89 ea             	mov    %r13,%rdx
  401473:	4c 89 f6             	mov    %r14,%rsi
  401476:	44 89 ff             	mov    %r15d,%edi
  401479:	41 ff 14 dc          	callq  *(%r12,%rbx,8)
  40147d:	48 83 c3 01          	add    $0x1,%rbx
  401481:	48 39 eb             	cmp    %rbp,%rbx
  401484:	75 ea                	jne    401470 <__libc_csu_init+0x40>
  401486:	48 83 c4 08          	add    $0x8,%rsp
  40148a:	5b                   	pop    %rbx
  40148b:	5d                   	pop    %rbp
  40148c:	41 5c                	pop    %r12
  40148e:	41 5d                	pop    %r13
  401490:	41 5e                	pop    %r14
  401492:	41 5f                	pop    %r15
  401494:	c3                   	retq   
  401495:	90                   	nop
  401496:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  40149d:	00 00 00 

00000000004014a0 <__libc_csu_fini>:
  4014a0:	f3 c3                	repz retq 

Disassembly of section .fini:

00000000004014a4 <_fini>:
  4014a4:	48 83 ec 08          	sub    $0x8,%rsp
  4014a8:	48 83 c4 08          	add    $0x8,%rsp
  4014ac:	c3                   	retq   
